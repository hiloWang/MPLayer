buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        // lambda
        classpath 'me.tatarka:gradle-retrolambda:3.1.0'
        // devmetrics 监测oncrete onstart onresume运行时间
        classpath 'com.frogermcs.androiddevmetrics:androiddevmetrics-plugin:0.3.1'
    }
}

apply plugin: 'com.android.application'
// devmetrics 监测oncrete onstart onresume运行时间
apply plugin: 'com.frogermcs.androiddevmetrics'
// lambda
apply plugin: 'me.tatarka.retrolambda'
// dagger2
apply plugin: 'com.neenbedankt.android-apt'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext");

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        // project gradle ext
        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
    }

    // android不支持java8 需要3个条件才可以使用lambda
    // 1)apply plugin: 'me.tatarka.retrolambda'
    // 2)classpath 'me.tatarka:gradle-retrolambda:3.1.0'
    // 3)下面的compileOptions
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    // data binding 只需这段代码即可完成引入
    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true                          //true 关闭lint报告的分析进度
        abortOnError false                  //true 错误发生后停止gradle构建
        ignoreWarnings true                 //true 只报告error
        // 以下是关闭lint指定错误检查
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {

        // 在local.properties配置keystore.properties，在keystore.properties存储签名信息
        def Properties localProps = new Properties()
        localProps.load(new FileInputStream(file('../local.properties')))
        def Properties keyProps = new Properties()

        // 如果读取不到'keystore.props.file'属性，就使用debug keystore

        if (localProps['keystore.props.file']) {
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
        } else {
            keyProps["store"] = '../buildsystem/debug.keystore'
            keyProps["alias"] = 'androiddebugkey'
            keyProps["storePass"] = 'android'
            keyProps["keyPass"] = 'android'
        }

        debug {
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["keyPass"]
        }

        release {
            // release版本使用assert确保存在该属性否则报错，避免错误打包
            assert localProps['keystore.props.file'];
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["keyPass"]
        }

      /*  debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }*/
    }

    buildTypes {
        // 开发环境
        debug {
            applicationIdSuffix '.debug'
            // 会在 BuildConfig 中生成常量，可用于设置开发、测试、生产环境的属性
            buildConfigField 'String', 'API_HOST_URL', '"http://192.168.10.239:8082/app/"'
            buildConfigField 'boolean', 'LOG_ENABLE', 'true'
            manifestPlaceholders = [APP_NAME: '律师楼开发版']
        }
        // 测试环境
        tmode.initWith(buildTypes.debug)
        tmode {
            minifyEnabled false
            applicationIdSuffix '.test'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_HOST_URL', '"http://game1.1332255.com/app/"'
            buildConfigField 'boolean', 'LOG_ENABLE', 'true'
            manifestPlaceholders = [APP_NAME: '律师楼测试版']
        }
        // 生产环境
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_HOST_URL', '"http://game1.1332255.com/app/"'
            buildConfigField 'boolean', 'LOG_ENABLE', 'false'
            manifestPlaceholders = [APP_NAME: '律师楼']
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
        //关闭预编译
//        preDexLibraries = false
    }

    // Apk 拆分机制(density屏幕密度拆分机制、ABI拆分机制)
    // 将apk以abi、density进行分包。再也不用为了缩小包的体积而专门去只留下一个arm的jni文件夹了，想怎么分怎么分，搞不定哪天就要传一个x86的包了，而且有的模拟器也只支持x86。
    splits {
        abi {
            enable true // 启用ABI拆分机制
            // exclude     默认情况下所有ABI都包括在内，你可以移除一些ABI
            reset() // 重置ABI列表为只包含一个空字符串（这可以实现，在与include一起使用来可以表示要使用哪一个ABI，而不是要忽略哪一些ABI）
            include 'armeabi', 'x86' // 指明要包含哪些ABI, 'x86', 'armeabi-v7a', 'mips'
            universalApk false // 指示是否打包一个通用版本（包含所有的ABI）。默认值为 false。
        }
    }
}



dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies

    compile project(':data')

    apt presentationDependencies.daggerCompiler
    compile presentationDependencies.dagger
    compile presentationDependencies.butterKnife
    apt presentationDependencies.butterKnifeCompiler
    compile presentationDependencies.rxJava
    compile presentationDependencies.rxAndroid
    provided presentationDependencies.javaxAnnotation
    compile presentationDependencies.glide
    compile presentationDependencies.cardview
    compile presentationDependencies.design
    compile presentationDependencies.appcompat
    compile presentationDependencies.supportV4
    compile presentationDependencies.recyclerAnimation
    compile presentationDependencies.rxBinding
    compile presentationDependencies.circleImageView

    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile presentationTestDependencies.espresso
    androidTestCompile presentationTestDependencies.testingSupportLib

    //Development
    compile developmentDependencies.leakCanary
}